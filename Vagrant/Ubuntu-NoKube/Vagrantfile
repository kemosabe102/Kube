# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Change the following for your network setup:
#   MASTER_NODE_IP
#   eth1 IP addresses
#   bridged network config
#   Replace instances of 172.30.250.x to your local network

servers = [
    {
        :name => "k8s-master",
        :type => "master",
        :box => "ubuntu/bionic64",
        :box_version => "20201016.0.0",
        :eth1 => "172.30.250.55",
        :mem => "2500",
        :cpu => "3"
    },
    {
        :name => "k8s-node-1",
        :type => "node",
        :box => "ubuntu/bionic64",
        :box_version => "20201016.0.0",
        :eth1 => "172.30.250.56",
        :mem => "2048",
        :cpu => "2"
    },
    {
        :name => "k8s-node-2",
        :type => "node",
        :box => "ubuntu/bionic64",
        :box_version => "20201016.0.0",
        :eth1 => "172.30.250.57",
        :mem => "2048",
        :cpu => "2"
    }
]

# This script to install k8s using kubeadm will get executed after a box is provisioned
$configureBox = <<-SCRIPT
    # kubelet requires swap off
    sudo swapoff -a

    # keep swap off after reboot
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    # Letting iptables see bridged traffic
    cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

    sudo sysctl --system

    # add hostname to /etc/hosts file
    ETC_HOSTS=/etc/hosts
    IP_ADDR=`ip route get 1 | awk '{print $7;exit}'`
    HOST_NAME=$(hostname)
    HOSTS_LINE="$IP_ADDR\t$HOST_NAME"
    sudo -- sh -c -e "echo '$HOSTS_LINE' >> $ETC_HOSTS"
SCRIPT

$configureMaster = <<-SCRIPT
    echo "This is a master node"
    # ip of this box
    IP_ADDR=`ip route get 1 | awk '{print $7;exit}'`
    POD_CIDR="192.168.0.0/16"

    # firewall config to allow necessary master node ports - allowing kube subnet
    sudo ufw allow from 172.30.250.0/24

    # required for setting up password less ssh between guest VMs
    sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
    sudo service sshd restart
SCRIPT

$configureNode = <<-SCRIPT
    echo "This is a worker node"
    # Add master node to /etc/hosts file
    ETC_HOSTS=/etc/hosts
    MASTER_NODE_IP="172.30.250.55"
    MASTER_HOST_NAME="k8s-master"
    HOSTS_LINE="$MASTER_NODE_IP\t$MASTER_HOST_NAME"
    sudo -- sh -c -e "echo '$HOSTS_LINE' >> $ETC_HOSTS"

    # firewall config to allow necessary worker node ports - allowing kube subnet
    sudo ufw allow from 172.30.250.0/24

    # required for setting up password less ssh between guest VMs
    sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
    sudo service sshd restart

    # Get and run script from master node to join cluster
    apt-get update && apt-get install -y sshpass
SCRIPT

Vagrant.configure("2") do |config|

    servers.each do |opts|
        config.vm.define opts[:name] do |config|

            config.vm.box = opts[:box]
            config.vm.box_version = opts[:box_version]
            config.vm.hostname = opts[:name]
            config.vm.network "public_network", ip: opts[:eth1], bridge: "Killer Wireless-n/a/ac 1435 Wireless Network Adapter"
            #config.vm.network :public_network, ip: opts[:eth1], bridge: "Intel(R) Dual Band Wireless-AC 8265" # bridged network
            #config.vm.network "private_network", type: "dhcp"

            config.vm.provider "virtualbox" do |v|

                v.name = opts[:name]
            	v.customize ["modifyvm", :id, "--groups", "/KubeDevelopment"]
                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]

            end

            # set default route via bridged interface for the command below that's run on master node 
            config.vm.provision "shell",
              run: "always",
              inline: "route add default gw 172.30.250.1"

            config.vm.provision "shell", inline: $configureBox

            if opts[:type] == "master"
                config.vm.provision "shell", inline: $configureMaster
            else
                config.vm.provision "shell", inline: $configureNode
            end

        end

    end

end 