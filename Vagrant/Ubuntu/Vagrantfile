# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Change the following for your network setup:
#   MASTER_NODE_IP
#   eth1 IP addresses
#   bridged network config
#   Replace instances of 172.16.200.x to your local network
#   DOCKER_VERSION
#   KUBE_VERSION

servers = [
    {
        :name => "k8s-master",
        :type => "master",
        :box => "ubuntu/bionic64",
        :box_version => "20200325.0.0",
        :eth1 => "172.16.200.55",
        :mem => "4096",
        :cpu => "3"
    },
    {
        :name => "k8s-node-1",
        :type => "node",
        :box => "ubuntu/bionic64",
        :box_version => "20200325.0.0",
        :eth1 => "172.16.200.56",
        :mem => "4096",
        :cpu => "2"
    },
    {
        :name => "k8s-node-2",
        :type => "node",
        :box => "ubuntu/bionic64",
        :box_version => "20200325.0.0",
        :eth1 => "172.16.200.57",
        :mem => "4096",
        :cpu => "2"
    }
]

# This script to install k8s using kubeadm will get executed after a box is provisioned
$configureBox = <<-SCRIPT
    # install docker v18.09 - https://docs.docker.com/install/linux/docker-ce/ubuntu/#install-docker-engine---community-1
    # list available versions - apt-cache madison docker-ce
    # Docker and Containerd versions and install instructions - https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker
    DOCKER_VERSION=5:19.03.8~3-0~ubuntu-$(lsb_release -cs)
    CONTAINERD_VERSION=1.2.13-1

    # Kube versions - https://github.com/kubernetes/kubernetes/tags
    KUBE_VERSION=1.17.4-00

    sudo apt-get upgrade -y

    # Install Docker CE
    ## Set up the repository:
    ### Install packages to allow apt to use a repository over HTTPS
    sudo apt-get update && sudo apt-get install -y \
    apt-transport-https ca-certificates curl software-properties-common

    ### Add Dockerâ€™s official GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    ### Add Docker apt repository.
    sudo add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable"

    ## Install Docker CE.
    sudo apt-get update && sudo apt-get install -y \
      containerd.io=$CONTAINERD_VERSION \
      docker-ce=$DOCKER_VERSION \
      docker-ce-cli=$DOCKER_VERSION
    
    # exclude Docker from getting updated so it won't break compatibility
    sudo apt-mark hold docker-ce docker-ce-cli containerd.io

    # run docker commands as vagrant user
    usermod -aG docker vagrant

    # Setup cgroupdriver as systemd - https://kubernetes.io/docs/setup/cri/
    cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
      "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

    # Setup Docker service
    mkdir -p /etc/systemd/system/docker.service.d
    systemctl daemon-reload
    systemctl restart docker
    systemctl enable docker.service
    systemctl start docker.service

    # install kubeadm - https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
    
    sudo apt-get update
    sudo apt-get install -y kubelet=$KUBE_VERSION kubeadm=$KUBE_VERSION kubectl=$KUBE_VERSION

    # exclude Kube components from getting updated during normal maintenance
    sudo apt-mark hold kubelet kubeadm kubectl

    # kubelet requires swap off
    swapoff -a

    # keep swap off after reboot
    sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    # add hostname to /etc/hosts file
    ETC_HOSTS=/etc/hosts
    IP_ADDR=`ip route get 1 | awk '{print $7;exit}'`
    HOST_NAME=$(hostname)
    HOSTS_LINE="$IP_ADDR\t$HOST_NAME"
    sudo -- sh -c -e "echo '$HOSTS_LINE' >> $ETC_HOSTS"
SCRIPT

$configureMaster = <<-SCRIPT
    echo "This is a master node"
    # ip of this box
    IP_ADDR=`ip route get 1 | awk '{print $7;exit}'`
    POD_CIDR="172.20.0.0/16"
    CALICO_VERSION=v3.10

    # firewall config to allow necessary master node ports - allowing kube subnet
    # sudo ufw allow 22/tcp
    # sudo ufw allow 6443/tcp
    # sudo ufw allow 2379:2380/tcp
    # sudo ufw allow 10250:10252/tcp
    sudo ufw allow from 172.16.200.0/24

    # install k8s master
    HOST_NAME=$(hostname)
    kubeadm init --apiserver-advertise-address=$IP_ADDR --apiserver-cert-extra-sans=$IP_ADDR,$HOST_NAME \
    --node-name $HOST_NAME --pod-network-cidr=$POD_CIDR --control-plane-endpoint $HOST_NAME:6443
    
    # copying credentials to regular user - vagrant
    sudo --user=vagrant mkdir -p /home/vagrant/.kube
    cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
    chown $(id -u vagrant):$(id -g vagrant) /home/vagrant/.kube/config

    # install Calico pod network addon
    export KUBECONFIG=/etc/kubernetes/admin.conf
    curl https://docs.projectcalico.org/$CALICO_VERSION/manifests/calico.yaml -O
    sed -i -e "s?192.168.0.0/16?$POD_CIDR?g" calico.yaml
    kubectl apply -f calico.yaml

    # Create join shell script with v=2 for more verbosity to help with troubleshooting
    kubeadm token create --print-join-command >> /etc/kubeadm_join_cmd.sh
    sudo sed -i '$ s/$/ --v=2/' /etc/kubeadm_join_cmd.sh
    chmod +x /etc/kubeadm_join_cmd.sh

    # required for setting up password less ssh between guest VMs
    sudo sed -i "/^[^#]*PasswordAuthentication[[:space:]]no/c\PasswordAuthentication yes" /etc/ssh/sshd_config
    sudo service sshd restart

SCRIPT

$configureNode = <<-SCRIPT
    echo "This is a worker node"
    # Add master node to /etc/hosts file
    ETC_HOSTS=/etc/hosts
    MASTER_NODE_IP="172.16.200.55"
    MASTER_HOST_NAME="k8s-master"
    HOSTS_LINE="$MASTER_NODE_IP\t$MASTER_HOST_NAME"
    sudo -- sh -c -e "echo '$HOSTS_LINE' >> $ETC_HOSTS"

    # firewall config to allow necessary worker node ports - allowing kube subnet
    # sudo ufw allow 22/tcp
    # sudo ufw allow 10250/tcp
    # sudo ufw allow 30000:32767/tcp
    sudo ufw allow from 172.16.200.0/24

    # Get and run script from master node to join cluster
    apt-get install -y sshpass
    sshpass -p "vagrant" scp -o StrictHostKeyChecking=no vagrant@$MASTER_NODE_IP:/etc/kubeadm_join_cmd.sh .
    sh ./kubeadm_join_cmd.sh
SCRIPT

Vagrant.configure("2") do |config|

    servers.each do |opts|
        config.vm.define opts[:name] do |config|

            config.vm.box = opts[:box]
            config.vm.box_version = opts[:box_version]
            config.vm.hostname = opts[:name]
            config.vm.network :public_network, ip: opts[:eth1], bridge: "Intel(R) Dual Band Wireless-AC 8265" # bridged network
            #config.vm.network "private_network", type: "dhcp"

            config.vm.provider "virtualbox" do |v|

                v.name = opts[:name]
            	v.customize ["modifyvm", :id, "--groups", "/KubeDevelopment"]
                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]

            end

            # we cannot use this because we can't install the docker version we want - https://github.com/hashicorp/vagrant/issues/4871
            #config.vm.provision "docker"

            # set default route via bridged interface for the command below that's run on master node 
            # IP_ADDR=`ip route get 1 | awk '{print $NF;exit}'`
            config.vm.provision "shell",
            run: "always",
            inline: "sudo ip route add 0.0.0.0/0 via 172.16.200.1"

            config.vm.provision "shell", inline: $configureBox

            if opts[:type] == "master"
                config.vm.provision "shell", inline: $configureMaster
            else
                config.vm.provision "shell", inline: $configureNode
            end

        end

    end

end 